name: FiveM FXAP Scanner Build

on:
  push:
    branches:
      - main

jobs:
  # Cria a tag e o próprio Release no GitHub
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout completo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Extract version
        run: echo "version=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create and push tag
        run: |
          git tag "${{ env.version }}"
          git push origin "${{ env.version }}"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.version }}
          release_name: "FiveM FXAP Scanner v${{ env.version }}"
          draft: false
          prerelease: ${{ contains(env.version, 'alpha') || contains(env.version, 'beta') }}

  # Build e upload de assets (portable, nsis, dmg, AppImage, etc.)
  build-and-upload:
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Build app (`npm run dist`)
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npm run dist

      - name: Upload Release Assets
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          UPLOAD_URL: ${{ needs.create-release.outputs.upload_url }}
        run: |
          echo "Uploading assets to $UPLOAD_URL"
          for file in release/*; do
            filename=$(basename "$file")
            echo "→ $filename"
            curl \
              --fail \
              -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "$UPLOAD_URL?name=$filename"
          done
